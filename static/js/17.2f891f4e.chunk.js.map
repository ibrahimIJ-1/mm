{"version":3,"sources":["components/basic/RemoteSelect.jsx","helpers/toBase64.js","components/basic/Modal.jsx","components/Plans/DBModel.jsx","components/Plans/List.jsx"],"names":["superagent","getAgentInstance","RemoteSelect","props","initialState","data","value","undefined","initialValue","defaultValue","fetching","all","state","onChange","setState","v","key","loadData","e","resetValue","onSearch","searchQuery","debounce","endpoint","params","limit","offset","q","get","process","query","end","err","res","body","exclude","array","filter","id","options","map","element","push","text","optiontext","name","optionvalue","ref","this","placeholder","disabled","className","rtl","textHolder","allowClear","mode","showSearch","labelInValue","notFoundContent","size","image","PRESENTED_IMAGE_SIMPLE","filterOption","style","width","Option","fontFamily","d","React","Component","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","DBModel","modelName","modelTitle","title","reloadGrid","buttonIcon","model","isModalVisible","imagePreview","selectImageFile","misFree","misPlan","benefits","loadModel","a","getRequest","icon","modelFormRef","current","setFieldsValue","headerEn","headerAr","descriptionEn","descriptionAr","backgroundColor","setBenefits","isIncluded","SubServiceBenefite","length","initialValues1","color1","r","g","b","imageFileChanged","files","document","getElementById","imageBase64","isFreeChanged","isFree","target","checked","isPlanChanged","isPlan","onFormFinished","values","formData","FormData","append","hex","JSON","stringify","postRequest","closeModal","showModal","createRef","type","onClick","shape","visible","onCancel","okButtonProps","form","htmlType","cancelButtonProps","display","onFinish","marginTop","gutter","span","src","Item","label","i18n","t","rules","required","message","accept","websiteImageFileRef","TextArea","p","index","newBenefits","pageSizeOptions","List","inject","observer","createTitle","editTitle","loading","type_name","selectedPackageId","selectedUserId","pagination","pageSize","parseInt","total","showSizeChanger","hideOnSinglePage","showQuickJumper","sortedInfo","editResourceId","access","fetch","filters","page","withoutSubService","qs","tpagination","count","deleteModel","deleting","deleteRequest","columns","align","dataIndex","sorter","render","ellipsis","object","EditOutlined","placement","onConfirm","okText","cancelText","DeleteFilled","color","newBtn","editBtn","newBtnClicked","click","editBtnClicked","handleTableChange","pager","categoryNameChanged","filterFormRef","rowClassName","rowKey","uniqid","dataSource","margin","height","PlusOutlined","withTranslation"],"mappings":"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","file":"static/js/17.2f891f4e.chunk.js","sourcesContent":["/* eslint-disable react/destructuring-assignment */\r\nimport React from 'react';\r\nimport { Select, Spin, Empty } from 'antd';\r\nimport debounce from 'lodash/debounce';\r\nimport getAgentInstance from '../../helpers/superagent';\r\n\r\nconst superagent = getAgentInstance();\r\n\r\nclass RemoteSelect extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    this.initialState = () => ({\r\n      data: [],\r\n      value: undefined,\r\n      initialValue: props.defaultValue || undefined,\r\n      fetching: false,\r\n      all: props.all ? props.all : false\r\n    });\r\n    this.state = this.initialState();\r\n\r\n    this.onChange = (value) => {\r\n      this.setState({ value });\r\n      try {\r\n        const v = value ? value.key : undefined;\r\n        const { onChange } = this.props;\r\n        onChange(value, v);\r\n        if (!value) {\r\n          this.loadData('');\r\n        }\r\n      } catch (e) {\r\n        //\r\n      }\r\n    };\r\n    this.resetValue = () => {\r\n      this.setState({ value: undefined });\r\n    };\r\n\r\n    this.onSearch = (searchQuery) => {\r\n      this.loadData(searchQuery);\r\n    };\r\n\r\n    this.loadData = debounce((searchQuery, endpoint = undefined) => {\r\n      this.setState({ fetching: true });\r\n      const params = {\r\n        limit: 100,\r\n        offset: 0,\r\n      };\r\n\r\n      if (searchQuery && searchQuery !== '') {\r\n        params.q = searchQuery;\r\n      }\r\n      superagent\r\n        .get(`${process.env.REACT_APP_API_URL}${endpoint || this.props.endpoint}`)\r\n        .query(params)\r\n        .end((err, res) => {\r\n          if (!err) {\r\n            const { body } = res;\r\n            const { exclude } = this.props;\r\n\r\n            let array = [];\r\n            if (exclude) {\r\n              const filtered = body.filter((value) => value.id !== exclude);\r\n              array = filtered;\r\n            } else array = body;\r\n\r\n            const options = [];\r\n            array.data.map((element) => {\r\n              options.push({\r\n                text:\r\n                  typeof this.props.optiontext === 'function'\r\n                    ? this.props.optiontext(element)\r\n                    : element.name,\r\n                value:\r\n                  typeof this.props.optionvalue === 'function'\r\n                    ? this.props.optionvalue(element)\r\n                    : element.id,\r\n              });\r\n              return null;\r\n            });\r\n            this.setState({ data: options, fetching: false });\r\n          } else {\r\n            this.setState({ data: [], fetching: false });\r\n          }\r\n        });\r\n    }, 800);\r\n\r\n    this.ref = props.ref;\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.endpoint) this.loadData();\r\n  }\r\n\r\n  static getDerivedStateFromProps(props) {\r\n    if ('value' in props) {\r\n      const { value } = props;\r\n      return { value };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    const { fetching, data, value, initialValue, all } = this.state;\r\n    const {\r\n      placeholder, disabled, className, rtl,\r\n    } = this.props;\r\n    const textHolder = placeholder || '';\r\n    return (\r\n      <Select\r\n        allowClear={this.props.allowClear === undefined ? true : this.props.allowClear}\r\n        mode={this.props.mode || null}\r\n        showSearch\r\n        disabled={disabled}\r\n        labelInValue\r\n        value={value}\r\n        defaultValue={initialValue}\r\n        notFoundContent={\r\n          fetching ? (\r\n            <Spin size=\"small\" />\r\n          ) : (\r\n            <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n          )\r\n        }\r\n        filterOption={false}\r\n        onSearch={this.onSearch}\r\n        onChange={this.onChange}\r\n        style={{ width: '100%' }}\r\n        placeholder={textHolder}\r\n        className={className || undefined}\r\n      >\r\n        {all && (<Select.Option key={-9} style={{ fontFamily: rtl ? 'Cuprumsemi' : undefined }}>All</Select.Option>)}\r\n        {data.map((d) => (\r\n          <Select.Option\r\n            key={d.value}\r\n            style={{ fontFamily: rtl ? 'Cuprumsemi' : undefined }}\r\n          >\r\n            {d.text}\r\n          </Select.Option>\r\n        ))}\r\n      </Select>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RemoteSelect;\r\n","export default function toBase64(file) {\r\n    return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => resolve(reader.result);\r\n            reader.onerror = error => reject(error);\r\n        }\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Modal } from 'antd';\r\n\r\nclass CustomModal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.initialState = () => ({\r\n      visible: false,\r\n    });\r\n    this.state = this.initialState();\r\n\r\n    this.show = () => this.setState({ visible: true });\r\n    (this.close = () => this.setState({ visible: false })),\r\n    (this.onOk = props.onOk ? props.onOk : () => {});\r\n    this.onCancel = props.onCancel\r\n      ? props.onCancel\r\n      : () => this.setState({ visible: false });\r\n    this.emptyJsx = () => <span />;\r\n  }\r\n\r\n  componentDidMount() {\r\n    try {\r\n      const {\r\n        show, close, onOk, onCancel,\r\n      } = this;\r\n      this.props.onMount(show, close, onOk, onCancel, this);\r\n    } catch (e) {}\r\n  }\r\n\r\n  render() {\r\n    const { visible } = this.state;\r\n    const {\r\n      show, close, onOk, onCancel,\r\n    } = this;\r\n    const {\r\n      btnRef, header, footer, size, maskClosable, nameOfClass,\r\n    } = this.props;\r\n    return (\r\n      <>\r\n        <div>\r\n          <style>\r\n            {`\r\n\r\n            .modal-lg{\r\n              width: 85% !important;\r\n            }\r\n            .modal-md{\r\n              width: 65% !important;\r\n            }\r\n            .modal-sm{\r\n              width: 45% !important;\r\n            }\r\n            .custom-modal .ant-modal-content{\r\n              overflow: auto !important;\r\n            }\r\n            .custom-modal{\r\n              margin-top: 2% !important;\r\n            }\r\n            .custom-modal .ant-modal-content .ant-modal-body{\r\n              min-height: 200px;\r\n              height: 100% !important;\r\n              margin-bottom: 25px !important;\r\n            }\r\n        `}\r\n\r\n          </style>\r\n          <button onClick={show} style={{ display: 'none' }} ref={btnRef} />\r\n        </div>\r\n        <Modal\r\n          maskClosable={maskClosable | false}\r\n          className={`${size} custom-modal ${nameOfClass}`}\r\n          centered\r\n          visible={visible}\r\n          title={header}\r\n          onOk={onOk}\r\n          onCancel={onCancel}\r\n          footer={footer | this.emptyJsx}\r\n        >\r\n          {visible\r\n            ? React.cloneElement(this.props.children, {\r\n              modal: {\r\n                show,\r\n                close,\r\n                onOk,\r\n                onCancel,\r\n              },\r\n            })\r\n            : null}\r\n          {/* { this.props.children} */}\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default CustomModal;\r\n","import React, { createRef } from \"react\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport i18n from \"../../i18n\";\r\nimport {\r\n  getRequest,\r\n  postRequest,\r\n  putRequest,\r\n} from \"../../helpers/superagentAPI\";\r\n\r\nimport {\r\n  Modal,\r\n  Button,\r\n  Form,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Divider,\r\n  Image,\r\n  InputNumber,\r\n  Checkbox,\r\n  Switch,\r\n} from \"antd\";\r\nimport toBase64 from \"../../helpers/toBase64\";\r\nimport { Colorpicker, ColorPickerValue } from \"antd-colorpicker\";\r\nimport RemoteSelect from \"../basic/RemoteSelect\";\r\nimport { Log } from \"@antv/scale\";\r\n\r\nexport default class DBModel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.initialState = () => ({\r\n      id: props.id,\r\n      modelName: props.modelName,\r\n      modelTitle: props.title,\r\n      reloadGrid: props.reloadGrid,\r\n      buttonIcon: props.buttonIcon,\r\n      model: null,\r\n      isModalVisible: false,\r\n      imagePreview: \"\",\r\n      selectImageFile: null,\r\n      misFree: false,\r\n      misPlan: true,\r\n      benefits: [],\r\n    });\r\n    this.state = this.initialState();\r\n    this.loadModel = async () => {\r\n      if (this.state.id) {\r\n        let data = await getRequest(`${this.state.modelName}/${this.state.id}`);\r\n        this.setState(\r\n          {\r\n            model: data,\r\n            imagePreview: `${process.env.REACT_APP_API_URL}${data.icon}`,\r\n          },\r\n          () => {\r\n            if (this.modelFormRef.current) {\r\n              this.modelFormRef.current.setFieldsValue({\r\n                headerEn: data.headerEn,\r\n                headerAr: data.headerAr,\r\n                descriptionEn: data.descriptionEn,\r\n                descriptionAr: data.descriptionAr,\r\n                backgroundColor: data.backgroundColor,\r\n                text: data.text,\r\n              });\r\n            }\r\n            this.setBenefits(data.benefits);\r\n          }\r\n        );\r\n      }\r\n    };\r\n\r\n    this.setBenefits = async (data) => {\r\n      let benefits = await getRequest(\r\n          `SubServiceBenefite?pageSize=1000&page=0&withoutSubService=1&planId=${this.state.id}`\r\n      );\r\n      benefits = benefits.data.map(d=>{\r\n        return {\r\n          id: d.id,\r\n          headerEn: d.headerEn,\r\n          isIncluded: d.SubServiceBenefite.length != 0? d.SubServiceBenefite[0].isIncluded : false,\r\n          text: d.SubServiceBenefite.length != 0? d.SubServiceBenefite[0].text : '',\r\n        }\r\n      })\r\n      this.setState({\r\n        benefits: data.map((d) => {\r\n          return {\r\n            ...d,\r\n            isIncluded: d.isIncluded === undefined ? 0 : d.isIncluded,\r\n          };\r\n        }),\r\n      });\r\n    };\r\n\r\n    this.initialValues1 = { color1: { r: 26, g: 14, b: 85, a: 1 } };\r\n    this.imageFileChanged = () => {\r\n      let files = document.getElementById(\"imageInput\").files;\r\n      this.setState(\r\n        {\r\n          selectImageFile: files.length != 0 ? files[0] : null,\r\n        },\r\n        async () => {\r\n          const { selectImageFile } = this.state;\r\n          if (selectImageFile == null) {\r\n            this.setState({\r\n              imagePreview: \"\",\r\n            });\r\n          } else {\r\n            let imageBase64 = await toBase64(selectImageFile);\r\n            this.setState({\r\n              imagePreview: imageBase64,\r\n            });\r\n          }\r\n        }\r\n      );\r\n    };\r\n    this.isFreeChanged = (e) => {\r\n      this.setState({\r\n        model: {\r\n          ...this.state.model,\r\n          isFree: e.target.checked,\r\n        },\r\n      });\r\n    };\r\n    this.isPlanChanged = (e) => {\r\n      this.setState({\r\n        model: {\r\n          ...this.state.model,\r\n          isPlan: e.target.checked,\r\n        },\r\n      });\r\n    };\r\n    this.onFormFinished = async (values) => {\r\n      const { id, modelName, reloadGrid } = this.state;\r\n      const {\r\n        headerEn,\r\n        headerAr,\r\n        descriptionEn,\r\n        descriptionAr,\r\n        backgroundColor,\r\n        text,\r\n      } = values;\r\n      let formData = new FormData();\r\n      // await postRequest(modelName, form)\r\n\r\n      formData.append(\"headerEn\", headerEn);\r\n      formData.append(\"headerAr\", headerAr);\r\n      formData.append(\"descriptionEn\", descriptionEn);\r\n      formData.append(\"descriptionAr\", descriptionAr);\r\n      formData.append(\"backgroundColor\", backgroundColor.hex);\r\n      formData.append(\"text\", text);\r\n      formData.append(\"isFree\", 0);\r\n      formData.append(\"isPlan\", 1);\r\n      formData.append(\"isWithoutSubService\", 1);\r\n      formData.append(\"benefits\", JSON.stringify(this.state.benefits));\r\n      if (this.state.selectImageFile)\r\n        formData.append(\"icon\", this.state.selectImageFile);\r\n      if (id) formData.append(\"id\", id);\r\n      await postRequest(modelName, formData);\r\n      if (reloadGrid) reloadGrid();\r\n      this.closeModal();\r\n    };\r\n\r\n    this.showModal = () => {\r\n      this.setState(\r\n        {\r\n          isModalVisible: true,\r\n          imagePreview: null,\r\n        },\r\n        async () => {\r\n          if (this.state.id) await this.loadModel();\r\n        }\r\n      );\r\n    };\r\n\r\n    this.closeModal = () => {\r\n      this.setState({\r\n        isModalVisible: false,\r\n      });\r\n    };\r\n\r\n    this.modelFormRef = createRef();\r\n  }\r\n\r\n  render() {\r\n    const { modelTitle, imagePreview, buttonIcon, id, benefits } = this.state;\r\n    return (\r\n      <div style={{ width: \"100%\" }}>\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={this.showModal}\r\n          icon={buttonIcon}\r\n          shape=\"round\"\r\n          className=\"btn_hover darkBlueBg\"\r\n          style={{ width: \"100%\" }}\r\n        ></Button>\r\n        {this.state.isModalVisible && (\r\n          <Modal\r\n            title={modelTitle}\r\n            visible={this.state.isModalVisible}\r\n            onCancel={this.closeModal}\r\n            okButtonProps={{\r\n              form: \"modelForm\",\r\n              htmlType: \"submit\",\r\n              className: \"darkBlueBg\",\r\n            }}\r\n            cancelButtonProps={{ style: { display: \"none\" } }}\r\n          >\r\n            <Form\r\n              id={\"modelForm\"}\r\n              ref={this.modelFormRef}\r\n              onFinish={this.onFormFinished}\r\n              style={{ marginTop: \"5%\" }}\r\n            >\r\n              <Row gutter={10}>\r\n                <Row>\r\n                  <Col span={24}>\r\n                    {imagePreview != \"\" && (\r\n                      <>\r\n                        <Image src={imagePreview} />\r\n                        <Divider />\r\n                      </>\r\n                    )}\r\n                    <Form.Item\r\n                      name={\"icon\"}\r\n                      label={i18n.t(\"Icon\")}\r\n                      rules={[\r\n                        {\r\n                          required: !id,\r\n                          message: i18n.t(\"Input is required\"),\r\n                        },\r\n                      ]}\r\n                    >\r\n                      <Input\r\n                        type={\"file\"}\r\n                        accept={\"image/*\"}\r\n                        id=\"imageInput\"\r\n                        ref={this.websiteImageFileRef}\r\n                        onChange={this.imageFileChanged}\r\n                      />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n                <Col span={24}>\r\n                  <Form.Item\r\n                    name={\"headerEn\"}\r\n                    label={i18n.t(\"English Header\")}\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                        message: i18n.t(\"input is required\"),\r\n                      },\r\n                    ]}\r\n                  >\r\n                    <Input />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={24}>\r\n                  <Form.Item\r\n                    name={\"descriptionEn\"}\r\n                    label={i18n.t(\"English Text\")}\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                        message: i18n.t(\"input is required\"),\r\n                      },\r\n                    ]}\r\n                  >\r\n                    <Input.TextArea />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={24}>\r\n                  <Form.Item\r\n                    name={\"headerAr\"}\r\n                    label={i18n.t(\"Arabic Header\")}\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                        message: i18n.t(\"input is required\"),\r\n                      },\r\n                    ]}\r\n                  >\r\n                    <Input />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={24}>\r\n                  <Form.Item\r\n                    name={\"descriptionAr\"}\r\n                    label={i18n.t(\"Arabic Text\")}\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                        message: i18n.t(\"input is required\"),\r\n                      },\r\n                    ]}\r\n                  >\r\n                    <Input.TextArea />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={8}>\r\n                  <Form.Item\r\n                    name={\"text\"}\r\n                    label={i18n.t(\"Price\")}\r\n                    rules={[\r\n                      {\r\n                        required: false,\r\n                        message: i18n.t(\"input is required\"),\r\n                      },\r\n                    ]}\r\n                  >\r\n                    <Input />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={6}>\r\n                  <Form.Item\r\n                    name={\"backgroundColor\"}\r\n                    label={i18n.t(\"Background Color\")}\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                        message: i18n.t(\"input is required\"),\r\n                      },\r\n                    ]}\r\n                  >\r\n                    <Colorpicker />\r\n                  </Form.Item>\r\n                </Col>\r\n              </Row>\r\n            </Form>\r\n            {benefits.length != 0 && (\r\n              <table\r\n                style={{\r\n                  width: \"100%\",\r\n                }}\r\n              >\r\n                <thead>\r\n                  <tr>\r\n                    <th>Benefit Name</th>\r\n                    <th>Include</th>\r\n                    <th>Text</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {benefits.map((p, index) => (\r\n                    <>\r\n                      <tr key={index}>\r\n                        <td>{p.headerEn}</td>\r\n                        <td>\r\n                          <Switch\r\n                            checked={p.isIncluded}\r\n                            onChange={(value) => {\r\n                              let newBenefits = [...this.state.benefits];\r\n                              newBenefits[index].isIncluded = value ? 1 : 0;\r\n                              this.setState({\r\n                                benefits: newBenefits,\r\n                              });\r\n                            }}\r\n                          />\r\n                        </td>\r\n                        <td>\r\n                          <Input\r\n                            value={p.text}\r\n                            onChange={(value) => {\r\n                              let newBenefits = [...this.state.benefits];\r\n                              newBenefits[index].text = value.target.value;\r\n                              this.setState({\r\n                                benefits: newBenefits,\r\n                              });\r\n                            }}\r\n                          />\r\n                        </td>\r\n                      </tr>\r\n                    </>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            )}\r\n          </Modal>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/* eslint-disable camelcase */\r\n/* eslint-disable react/no-access-state-in-setstate */\r\n/* eslint-disable react/destructuring-assignment */\r\nimport React from 'react';\r\nimport {\r\n    Table,\r\n    Button,\r\n    Row,\r\n    Col,\r\n    Form,\r\n    Select,\r\n    Switch,\r\n    Input,\r\n    Divider, Popconfirm\r\n} from 'antd';\r\nimport {\r\n    CheckOutlined,\r\n    CloseOutlined,\r\n    RedoOutlined,\r\n    PlusOutlined,\r\n    EditOutlined, DeleteFilled\r\n} from '@ant-design/icons';\r\n\r\nimport { observer, inject } from 'mobx-react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport uniqid from 'uniqid';\r\nimport moment from 'moment';\r\nimport qs from 'qs';\r\nimport i18n from '../../i18n';\r\nimport './model.css';\r\nimport DBModel from \"./DBModel\"\r\n\r\nimport Modal from '../basic/Modal';\r\nimport getAgentInstance from '../../helpers/superagent'\r\nimport { deleteRequest, getRequest, patchRequest } from '../../helpers/superagentAPI'\r\nimport RemoteSelect from \"../basic/RemoteSelect\";\r\n\r\nconst superagent = getAgentInstance();\r\n\r\nconst pageSizeOptions = ['8', '15', '20', '30', '40'];\r\n\r\n@inject('userStore')\r\n@observer\r\nclass List extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.initialState = () => ({\r\n            modelName: 'SubServicePlan',\r\n            createTitle: i18n.t('New Record'),\r\n            editTitle: i18n.t('Edit Record'),\r\n            data: [],\r\n            loading: false,\r\n            type_name: undefined,\r\n            selectedPackageId: -1,\r\n            selectedUserId: -1,\r\n            pagination: {\r\n                pageSize: parseInt(pageSizeOptions[0], 10),\r\n                pageSizeOptions,\r\n                current: 1,\r\n                total: 0,\r\n                showSizeChanger: true,\r\n                hideOnSinglePage: false,\r\n                showQuickJumper: true,\r\n            },\r\n            sortedInfo: null,\r\n            editResourceId: undefined,\r\n            access: []//JSON.parse(this.props.userStore.value.privilege),\r\n        });\r\n        this.state = this.initialState();\r\n\r\n        this.fetch = async () => {\r\n            this.setState({ loading: true });\r\n            const { pagination, modelName, filters } = this.state;\r\n\r\n            const params = {\r\n                pageSize: pagination.pageSize,\r\n                page: pagination.current - 1,\r\n                withoutSubService: 1\r\n            };\r\n\r\n            try {\r\n                this.setState({ loading: true })\r\n                let body = await getRequest(`${modelName}?${qs.stringify(params)}`)\r\n                const tpagination = { ...this.state.pagination };\r\n                tpagination.total = body.count;\r\n                this.setState({\r\n                    loading: false,\r\n                    data: body.data,\r\n                    pagination: tpagination,\r\n                });\r\n            } catch (error) {\r\n                this.setState(this.initialState())\r\n            } finally {\r\n                this.setState({ loading: false })\r\n            }\r\n        };\r\n\r\n        this.deleteModel = async (id) => {\r\n            try {\r\n                this.setState({\r\n                    deleting: true\r\n                })\r\n                await deleteRequest(`${this.state.modelName}/${id}`)\r\n                this.fetch()\r\n            } catch (error) {\r\n            } finally {\r\n                this.setState({\r\n                    deleting: false\r\n                })\r\n            }\r\n        }\r\n\r\n        this.columns = [\r\n            {\r\n                title: '#',\r\n                align: 'center',\r\n                dataIndex: 'id',\r\n                key: 'id',\r\n                sorter: true,\r\n                width: 70,\r\n                render: (value) => <p style={{ fontFamily: 'Cuprumsemi' }}>{value}</p>,\r\n            },\r\n            {\r\n                title: i18n.t('Title'),\r\n                dataIndex: `headerEn`,\r\n                key: `headerEn`,\r\n                align: 'start',\r\n                ellipsis: true,\r\n                render: (value) => <p style={{ fontFamily: 'Cuprumsemi' }}>{value}</p>,\r\n            },\r\n            {\r\n                title: i18n.t('Is Free'),\r\n                dataIndex: `isFree`,\r\n                key: `isFree`,\r\n                align: 'start',\r\n                ellipsis: true,\r\n                render: (value) => <p style={{ fontFamily: 'Cuprumsemi' }}>{value ? 'Yes' : 'No'}</p>,\r\n            },\r\n            {\r\n                title: i18n.t('Is Plan'),\r\n                dataIndex: `isPlan`,\r\n                key: `isPlan`,\r\n                align: 'start',\r\n                ellipsis: true,\r\n                render: (value) => <p style={{ fontFamily: 'Cuprumsemi' }}>{value ? 'Yes' : 'No'}</p>,\r\n            },\r\n            {\r\n                title: i18n.t('Text'),\r\n                dataIndex: `text`,\r\n                key: `text`,\r\n                align: 'start',\r\n                ellipsis: true,\r\n                render: (value) => <p style={{ fontFamily: 'Cuprumsemi' }}>{value}</p>,\r\n            },\r\n\r\n            {\r\n                title: i18n.t('Actions'),\r\n                sorter: false,\r\n                align: 'center',\r\n                width: 160,\r\n                render: (object) => (\r\n                    <Row span={24}>\r\n                        <Col span={12}>\r\n                            <DBModel id={object.id} reloadGrid={this.fetch} title={this.state.editTitle}\r\n                                modelName={this.state.modelName} buttonIcon={(<EditOutlined />)} />\r\n                        </Col>\r\n                        <Col span={12}>\r\n                            <Popconfirm placement=\"bottom\" title={i18n.t('delete') + '?'}\r\n                                onConfirm={() => this.deleteModel(object.id)}\r\n                                okText={i18n.t('Yes')}\r\n                                cancelText={i18n.t('No')}>\r\n                                <Button icon={<DeleteFilled style={{\r\n                                    color: 'red'\r\n                                }} />}\r\n                                    shape=\"round\"\r\n                                    className=\"btn_hover darkBlueBg\"\r\n                                    type={'primary'}\r\n                                    loading={this.state.deleting} />\r\n                            </Popconfirm>\r\n                        </Col>\r\n                    </Row>\r\n                ),\r\n            },\r\n        ];\r\n\r\n        // custom refs\r\n        this.newBtn = React.createRef();\r\n        this.editBtn = React.createRef();\r\n\r\n        this.newBtnClicked = () => {\r\n            this.newBtn.current.click();\r\n        };\r\n\r\n        this.editBtnClicked = async (id) => {\r\n            await this.setState({\r\n                editResourceId: id,\r\n            });\r\n            this.editBtn.current.click();\r\n        };\r\n\r\n        this.handleTableChange = (pagination, filters, sorter) => {\r\n            const pager = { ...this.state.pagination };\r\n            pager.current = pagination.current;\r\n            pager.pageSize = pagination.pageSize;\r\n            this.setState(\r\n                {\r\n                    pagination: pager,\r\n                    sortedInfo: sorter,\r\n                },\r\n                () => this.fetch(),\r\n            );\r\n        };\r\n\r\n        this.categoryNameChanged = () => {\r\n            this.fetch()\r\n        }\r\n\r\n        this.filterFormRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetch();\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            data, pagination, loading, createTitle, modelName\r\n        } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <Row gutter={[10, 10]}>\r\n                    <Col span={24}>\r\n                        <Table\r\n                            columns={this.columns}\r\n                            rowClassName=\"tb_row\"\r\n                            rowKey={() => uniqid()}\r\n                            dataSource={data}\r\n                            pagination={pagination}\r\n                            loading={loading}\r\n                            onChange={this.handleTableChange}\r\n                            title={() => (\r\n                                <Row>\r\n                                    <Col span={4} style={{ display: 'flex' }}><h2\r\n                                        style={{ margin: 'auto' }}>{i18n.t(modelName)}</h2><Divider type={'vertical'}\r\n                                            style={{\r\n                                                height: '80%',\r\n                                                margin: 'auto 10%'\r\n                                            }} /></Col>\r\n                                    <Col offset={20} span={4}><DBModel reloadGrid={this.fetch} title={createTitle}\r\n                                        modelName={modelName}\r\n                                        buttonIcon={(<PlusOutlined />)} /></Col>\r\n                                </Row>\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <p className=\"pager-Info\">\r\n                    {i18n.t('Showing')}\r\n                    {' '}\r\n                    {data.length}\r\n                    {' '}\r\n                    {i18n.t('from')}\r\n                    {' '}\r\n                    {pagination.total}\r\n                </p>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(List);\r\n"],"sourceRoot":""}