{"version":3,"sources":["components/basic/RemoteSelect.jsx","helpers/toBase64.js","components/basic/Modal.jsx","components/Addresses/DBModel.jsx","components/Addresses/List.jsx"],"names":["superagent","getAgentInstance","RemoteSelect","props","initialState","data","value","undefined","initialValue","defaultValue","fetching","all","state","onChange","setState","v","key","loadData","e","resetValue","onSearch","searchQuery","debounce","endpoint","params","limit","offset","q","get","process","query","end","err","res","body","exclude","array","filter","id","options","map","element","push","text","optiontext","name","optionvalue","ref","this","placeholder","disabled","className","rtl","textHolder","allowClear","mode","showSearch","labelInValue","notFoundContent","size","image","PRESENTED_IMAGE_SIMPLE","filterOption","style","width","Option","fontFamily","d","React","Component","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","DBModel","modelName","modelTitle","title","reloadGrid","buttonIcon","model","isModalVisible","imagePreview","selectImageFile","loadModel","a","getRequest","modelFormRef","current","setFieldsValue","locationEn","locationAr","phoneNumber","buildNumber","imageFileChanged","files","document","getElementById","length","imageBase64","onFormFinished","values","formData","FormData","append","postRequest","closeModal","showModal","createRef","type","onClick","icon","shape","visible","onCancel","okButtonProps","form","htmlType","cancelButtonProps","display","onFinish","marginTop","gutter","span","src","Item","label","i18n","t","rules","required","message","accept","websiteImageFileRef","pageSizeOptions","List","inject","observer","createTitle","editTitle","loading","type_name","selectedPackageId","selectedUserId","pagination","pageSize","parseInt","total","showSizeChanger","hideOnSinglePage","showQuickJumper","sortedInfo","editResourceId","access","fetch","filters","page","qs","stringify","tpagination","count","deleteModel","deleting","deleteRequest","columns","align","dataIndex","sorter","render","ellipsis","object","EditOutlined","placement","onConfirm","okText","cancelText","DeleteFilled","color","newBtn","editBtn","newBtnClicked","click","editBtnClicked","handleTableChange","pager","categoryNameChanged","filterFormRef","rowClassName","rowKey","uniqid","dataSource","margin","height","PlusOutlined","withTranslation"],"mappings":"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","file":"static/js/11.bd9e3cd9.chunk.js","sourcesContent":["/* eslint-disable react/destructuring-assignment */\r\nimport React from 'react';\r\nimport { Select, Spin, Empty } from 'antd';\r\nimport debounce from 'lodash/debounce';\r\nimport getAgentInstance from '../../helpers/superagent';\r\n\r\nconst superagent = getAgentInstance();\r\n\r\nclass RemoteSelect extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    this.initialState = () => ({\r\n      data: [],\r\n      value: undefined,\r\n      initialValue: props.defaultValue || undefined,\r\n      fetching: false,\r\n      all: props.all ? props.all : false\r\n    });\r\n    this.state = this.initialState();\r\n\r\n    this.onChange = (value) => {\r\n      this.setState({ value });\r\n      try {\r\n        const v = value ? value.key : undefined;\r\n        const { onChange } = this.props;\r\n        onChange(value, v);\r\n        if (!value) {\r\n          this.loadData('');\r\n        }\r\n      } catch (e) {\r\n        //\r\n      }\r\n    };\r\n    this.resetValue = () => {\r\n      this.setState({ value: undefined });\r\n    };\r\n\r\n    this.onSearch = (searchQuery) => {\r\n      this.loadData(searchQuery);\r\n    };\r\n\r\n    this.loadData = debounce((searchQuery, endpoint = undefined) => {\r\n      this.setState({ fetching: true });\r\n      const params = {\r\n        limit: 100,\r\n        offset: 0,\r\n      };\r\n\r\n      if (searchQuery && searchQuery !== '') {\r\n        params.q = searchQuery;\r\n      }\r\n      superagent\r\n        .get(`${process.env.REACT_APP_API_URL}${endpoint || this.props.endpoint}`)\r\n        .query(params)\r\n        .end((err, res) => {\r\n          if (!err) {\r\n            const { body } = res;\r\n            const { exclude } = this.props;\r\n\r\n            let array = [];\r\n            if (exclude) {\r\n              const filtered = body.filter((value) => value.id !== exclude);\r\n              array = filtered;\r\n            } else array = body;\r\n\r\n            const options = [];\r\n            array.data.map((element) => {\r\n              options.push({\r\n                text:\r\n                  typeof this.props.optiontext === 'function'\r\n                    ? this.props.optiontext(element)\r\n                    : element.name,\r\n                value:\r\n                  typeof this.props.optionvalue === 'function'\r\n                    ? this.props.optionvalue(element)\r\n                    : element.id,\r\n              });\r\n              return null;\r\n            });\r\n            this.setState({ data: options, fetching: false });\r\n          } else {\r\n            this.setState({ data: [], fetching: false });\r\n          }\r\n        });\r\n    }, 800);\r\n\r\n    this.ref = props.ref;\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.endpoint) this.loadData();\r\n  }\r\n\r\n  static getDerivedStateFromProps(props) {\r\n    if ('value' in props) {\r\n      const { value } = props;\r\n      return { value };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    const { fetching, data, value, initialValue, all } = this.state;\r\n    const {\r\n      placeholder, disabled, className, rtl,\r\n    } = this.props;\r\n    const textHolder = placeholder || '';\r\n    return (\r\n      <Select\r\n        allowClear={this.props.allowClear === undefined ? true : this.props.allowClear}\r\n        mode={this.props.mode || null}\r\n        showSearch\r\n        disabled={disabled}\r\n        labelInValue\r\n        value={value}\r\n        defaultValue={initialValue}\r\n        notFoundContent={\r\n          fetching ? (\r\n            <Spin size=\"small\" />\r\n          ) : (\r\n            <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n          )\r\n        }\r\n        filterOption={false}\r\n        onSearch={this.onSearch}\r\n        onChange={this.onChange}\r\n        style={{ width: '100%' }}\r\n        placeholder={textHolder}\r\n        className={className || undefined}\r\n      >\r\n        {all && (<Select.Option key={-9} style={{ fontFamily: rtl ? 'Cuprumsemi' : undefined }}>All</Select.Option>)}\r\n        {data.map((d) => (\r\n          <Select.Option\r\n            key={d.value}\r\n            style={{ fontFamily: rtl ? 'Cuprumsemi' : undefined }}\r\n          >\r\n            {d.text}\r\n          </Select.Option>\r\n        ))}\r\n      </Select>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RemoteSelect;\r\n","export default function toBase64(file) {\r\n    return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => resolve(reader.result);\r\n            reader.onerror = error => reject(error);\r\n        }\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Modal } from 'antd';\r\n\r\nclass CustomModal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.initialState = () => ({\r\n      visible: false,\r\n    });\r\n    this.state = this.initialState();\r\n\r\n    this.show = () => this.setState({ visible: true });\r\n    (this.close = () => this.setState({ visible: false })),\r\n    (this.onOk = props.onOk ? props.onOk : () => {});\r\n    this.onCancel = props.onCancel\r\n      ? props.onCancel\r\n      : () => this.setState({ visible: false });\r\n    this.emptyJsx = () => <span />;\r\n  }\r\n\r\n  componentDidMount() {\r\n    try {\r\n      const {\r\n        show, close, onOk, onCancel,\r\n      } = this;\r\n      this.props.onMount(show, close, onOk, onCancel, this);\r\n    } catch (e) {}\r\n  }\r\n\r\n  render() {\r\n    const { visible } = this.state;\r\n    const {\r\n      show, close, onOk, onCancel,\r\n    } = this;\r\n    const {\r\n      btnRef, header, footer, size, maskClosable, nameOfClass,\r\n    } = this.props;\r\n    return (\r\n      <>\r\n        <div>\r\n          <style>\r\n            {`\r\n\r\n            .modal-lg{\r\n              width: 85% !important;\r\n            }\r\n            .modal-md{\r\n              width: 65% !important;\r\n            }\r\n            .modal-sm{\r\n              width: 45% !important;\r\n            }\r\n            .custom-modal .ant-modal-content{\r\n              overflow: auto !important;\r\n            }\r\n            .custom-modal{\r\n              margin-top: 2% !important;\r\n            }\r\n            .custom-modal .ant-modal-content .ant-modal-body{\r\n              min-height: 200px;\r\n              height: 100% !important;\r\n              margin-bottom: 25px !important;\r\n            }\r\n        `}\r\n\r\n          </style>\r\n          <button onClick={show} style={{ display: 'none' }} ref={btnRef} />\r\n        </div>\r\n        <Modal\r\n          maskClosable={maskClosable | false}\r\n          className={`${size} custom-modal ${nameOfClass}`}\r\n          centered\r\n          visible={visible}\r\n          title={header}\r\n          onOk={onOk}\r\n          onCancel={onCancel}\r\n          footer={footer | this.emptyJsx}\r\n        >\r\n          {visible\r\n            ? React.cloneElement(this.props.children, {\r\n              modal: {\r\n                show,\r\n                close,\r\n                onOk,\r\n                onCancel,\r\n              },\r\n            })\r\n            : null}\r\n          {/* { this.props.children} */}\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default CustomModal;\r\n","import React, { createRef } from 'react';\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport i18n from '../../i18n';\r\nimport { getRequest, postRequest, putRequest } from '../../helpers/superagentAPI'\r\n\r\nimport { Modal, Button, Form, Input, Row, Col, Divider, Image, InputNumber } from 'antd'\r\nimport toBase64 from \"../../helpers/toBase64\";\r\n\r\nexport default class DBModel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.initialState = () => ({\r\n            id: props.id,\r\n            modelName: props.modelName,\r\n            modelTitle: props.title,\r\n            reloadGrid: props.reloadGrid,\r\n            buttonIcon: props.buttonIcon,\r\n            model: null,\r\n            isModalVisible: false,\r\n            imagePreview: '',\r\n            selectImageFile: null\r\n        });\r\n        this.state = this.initialState();\r\n        this.loadModel = async () => {\r\n            if (this.state.id) {\r\n                let data = await getRequest(`${this.state.modelName}/${this.state.id}`)\r\n                this.setState({\r\n                    model: data,\r\n                    imagePreview: `${process.env.REACT_APP_API_URL}${data.image}`,\r\n                }, () => {\r\n                    if (this.modelFormRef.current) {\r\n                        this.modelFormRef.current.setFieldsValue({\r\n                            locationEn: data.locationEn,\r\n                            locationAr: data.locationAr,\r\n                            phoneNumber: data.phoneNumber,\r\n                            buildNumber: data.buildNumber,\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        this.imageFileChanged = () => {\r\n            let files = document.getElementById('imageInput').files\r\n            this.setState({\r\n                selectImageFile: files.length != 0 ? files[0] : null\r\n            }, async () => {\r\n                const { selectImageFile } = this.state\r\n                if (selectImageFile == null) {\r\n                    this.setState({\r\n                        imagePreview: ''\r\n                    })\r\n                } else {\r\n                    let imageBase64 = await toBase64(selectImageFile)\r\n                    this.setState({\r\n                        imagePreview: imageBase64\r\n                    })\r\n                }\r\n            })\r\n        }\r\n\r\n        this.onFormFinished = async (values) => {\r\n            const { id, modelName, reloadGrid } = this.state\r\n            const { locationEn,\r\n                locationAr,\r\n                phoneNumber,\r\n                buildNumber, } = values\r\n            let formData = new FormData()\r\n            formData.append('locationEn', locationEn)\r\n            formData.append('locationAr', locationAr)\r\n            formData.append('phoneNumber', phoneNumber)\r\n            formData.append('buildNumber', buildNumber)\r\n            if (this.state.selectImageFile) formData.append('image', this.state.selectImageFile)\r\n            if (id) formData.append('id', id)\r\n            await postRequest(modelName, formData)\r\n            if (reloadGrid) reloadGrid()\r\n            this.closeModal()\r\n        }\r\n\r\n        this.showModal = () => {\r\n            this.setState({\r\n                isModalVisible: true,\r\n                imagePreview: null\r\n            }, async () => {\r\n                if (this.state.id) await this.loadModel()\r\n            });\r\n        };\r\n\r\n        this.closeModal = () => {\r\n            this.setState({\r\n                isModalVisible: false\r\n            });\r\n        };\r\n\r\n        this.modelFormRef = createRef()\r\n    }\r\n\r\n    render() {\r\n        const { modelTitle, imagePreview, buttonIcon, id } = this.state\r\n        return (\r\n            <div style={{ width: '100%' }}>\r\n                <Button\r\n                    type=\"primary\"\r\n                    onClick={this.showModal}\r\n                    icon={buttonIcon}\r\n                    shape=\"round\"\r\n                    className=\"btn_hover darkBlueBg\"\r\n                    style={{ width: '100%' }}\r\n                >\r\n                </Button>\r\n                {this.state.isModalVisible && (<Modal title={modelTitle}\r\n                    visible={this.state.isModalVisible}\r\n                    onCancel={this.closeModal}\r\n                    okButtonProps={{ form: 'modelForm', htmlType: 'submit', className: 'darkBlueBg' }}\r\n                    cancelButtonProps={{ style: { display: 'none' } }}>\r\n\r\n                    <Form id={'modelForm'} ref={this.modelFormRef} onFinish={this.onFormFinished} style={{ marginTop: '5%' }}>\r\n                        <Row gutter={10}>\r\n                            <Row>\r\n                                <Col span={24}>\r\n                                    {imagePreview != '' && (<><Image src={imagePreview} /><Divider /></>)}\r\n                                    <Form.Item\r\n                                        name={'image'}\r\n                                        label={i18n.t('Image')}\r\n                                        rules={[\r\n                                            {\r\n                                                required: !id,\r\n                                                message: i18n.t('Input is required'),\r\n                                            },\r\n                                        ]}>\r\n                                        <Input type={'file'} accept={'image/*'} id=\"imageInput\"\r\n                                            ref={this.websiteImageFileRef} onChange={this.imageFileChanged} />\r\n                                    </Form.Item>\r\n                                </Col>\r\n                            </Row>\r\n                            <Col span={24}>\r\n                                <Form.Item\r\n                                    name={'locationEn'}\r\n                                    label={i18n.t('Address English')}\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: i18n.t('input is required'),\r\n                                        },\r\n                                    ]}>\r\n                                    <Input />\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col span={24}>\r\n                                <Form.Item\r\n                                    name={'locationAr'}\r\n                                    label={i18n.t('Address Arabic')}\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: i18n.t('input is required'),\r\n                                        },\r\n                                    ]}>\r\n                                    <Input />\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col span={12}>\r\n                                <Form.Item\r\n                                    name={'phoneNumber'}\r\n                                    label={i18n.t('Phone Number')}\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: i18n.t('input is required'),\r\n                                        },\r\n                                    ]}>\r\n                                    <Input />\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col span={12}>\r\n                                <Form.Item\r\n                                    name={'buildNumber'}\r\n                                    label={i18n.t('Building Number')}\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: i18n.t('input is required'),\r\n                                        },\r\n                                    ]}>\r\n                                    <InputNumber />\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </Modal>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/* eslint-disable camelcase */\r\n/* eslint-disable react/no-access-state-in-setstate */\r\n/* eslint-disable react/destructuring-assignment */\r\nimport React from 'react';\r\nimport {\r\n    Table,\r\n    Button,\r\n    Row,\r\n    Col,\r\n    Form,\r\n    Select,\r\n    Switch,\r\n    Input,\r\n    Divider, Popconfirm\r\n} from 'antd';\r\nimport {\r\n    CheckOutlined,\r\n    CloseOutlined,\r\n    RedoOutlined,\r\n    PlusOutlined,\r\n    EditOutlined, DeleteFilled\r\n} from '@ant-design/icons';\r\n\r\nimport { observer, inject } from 'mobx-react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport uniqid from 'uniqid';\r\nimport moment from 'moment';\r\nimport qs from 'qs';\r\nimport i18n from '../../i18n';\r\nimport './model.css';\r\nimport DBModel from \"./DBModel\"\r\n\r\nimport Modal from '../basic/Modal';\r\nimport getAgentInstance from '../../helpers/superagent'\r\nimport { deleteRequest, getRequest, patchRequest } from '../../helpers/superagentAPI'\r\nimport RemoteSelect from \"../basic/RemoteSelect\";\r\n\r\nconst superagent = getAgentInstance();\r\n\r\nconst pageSizeOptions = ['8', '15', '20', '30', '40'];\r\n\r\n@inject('userStore')\r\n@observer\r\nclass List extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.initialState = () => ({\r\n            modelName: 'Addresses',\r\n            createTitle: i18n.t('New Record'),\r\n            editTitle: i18n.t('Edit Record'),\r\n            data: [],\r\n            loading: false,\r\n            type_name: undefined,\r\n            selectedPackageId: -1,\r\n            selectedUserId: -1,\r\n            pagination: {\r\n                pageSize: parseInt(pageSizeOptions[0], 10),\r\n                pageSizeOptions,\r\n                current: 1,\r\n                total: 0,\r\n                showSizeChanger: true,\r\n                hideOnSinglePage: false,\r\n                showQuickJumper: true,\r\n            },\r\n            sortedInfo: null,\r\n            editResourceId: undefined,\r\n            access: []//JSON.parse(this.props.userStore.value.privilege),\r\n        });\r\n        this.state = this.initialState();\r\n\r\n        this.fetch = async () => {\r\n            this.setState({ loading: true });\r\n            const { pagination, modelName, filters } = this.state;\r\n\r\n            const params = {\r\n                pageSize: pagination.pageSize,\r\n                page: pagination.current - 1,\r\n            };\r\n\r\n            try {\r\n                this.setState({ loading: true })\r\n                let body = await getRequest(`${modelName}?${qs.stringify(params)}`)\r\n                const tpagination = { ...this.state.pagination };\r\n                tpagination.total = body.count;\r\n                this.setState({\r\n                    loading: false,\r\n                    data: body.data,\r\n                    pagination: tpagination,\r\n                });\r\n            } catch (error) {\r\n                this.setState(this.initialState())\r\n            } finally {\r\n                this.setState({ loading: false })\r\n            }\r\n        };\r\n\r\n        this.deleteModel = async (id) => {\r\n            try {\r\n                this.setState({\r\n                    deleting: true\r\n                })\r\n                await deleteRequest(`${this.state.modelName}/${id}`)\r\n                this.fetch()\r\n            } catch (error) {\r\n            } finally {\r\n                this.setState({\r\n                    deleting: false\r\n                })\r\n            }\r\n        }\r\n\r\n        this.columns = [\r\n            {\r\n                title: '#',\r\n                align: 'center',\r\n                dataIndex: 'id',\r\n                key: 'id',\r\n                sorter: true,\r\n                width: 70,\r\n                render: (value) => <p style={{ fontFamily: 'Cuprumsemi' }}>{value}</p>,\r\n            },\r\n            {\r\n                title: i18n.t('Address'),\r\n                dataIndex: `locationEn`,\r\n                key: `locationEn`,\r\n                align: 'start',\r\n                ellipsis: true,\r\n                render: (value) => <p style={{ fontFamily: 'Cuprumsemi' }}>{value}</p>,\r\n            },\r\n            {\r\n                title: i18n.t('Phone Number'),\r\n                dataIndex: `phoneNumber`,\r\n                key: `phoneNumber`,\r\n                align: 'start',\r\n                ellipsis: true,\r\n                render: (value) => <p style={{ fontFamily: 'Cuprumsemi' }}>{value}</p>,\r\n            },\r\n\r\n            {\r\n                title: i18n.t('Building Number'),\r\n                dataIndex: `buildNumber`,\r\n                key: `buildNumber`,\r\n                align: 'start',\r\n                ellipsis: true,\r\n                render: (value) => <p style={{ fontFamily: 'Cuprumsemi' }}>{value}</p>,\r\n            },\r\n\r\n\r\n            {\r\n                title: i18n.t('Actions'),\r\n                sorter: false,\r\n                align: 'center',\r\n                width: 160,\r\n                render: (object) => (\r\n                    <Row span={24}>\r\n                        <Col span={12}>\r\n                            <DBModel id={object.id} reloadGrid={this.fetch} title={this.state.editTitle}\r\n                                modelName={this.state.modelName} buttonIcon={(<EditOutlined />)} />\r\n                        </Col>\r\n                        <Col span={12}>\r\n                            <Popconfirm placement=\"bottom\" title={i18n.t('delete') + '?'}\r\n                                onConfirm={() => this.deleteModel(object.id)}\r\n                                okText={i18n.t('Yes')}\r\n                                cancelText={i18n.t('No')}>\r\n                                <Button icon={<DeleteFilled style={{\r\n                                    color: 'red'\r\n                                }} />}\r\n                                    shape=\"round\"\r\n                                    className=\"btn_hover darkBlueBg\"\r\n                                    type={'primary'}\r\n                                    loading={this.state.deleting} />\r\n                            </Popconfirm>\r\n                        </Col>\r\n                    </Row>\r\n                ),\r\n            },\r\n        ];\r\n\r\n        // custom refs\r\n        this.newBtn = React.createRef();\r\n        this.editBtn = React.createRef();\r\n\r\n        this.newBtnClicked = () => {\r\n            this.newBtn.current.click();\r\n        };\r\n\r\n        this.editBtnClicked = async (id) => {\r\n            await this.setState({\r\n                editResourceId: id,\r\n            });\r\n            this.editBtn.current.click();\r\n        };\r\n\r\n        this.handleTableChange = (pagination, filters, sorter) => {\r\n            const pager = { ...this.state.pagination };\r\n            pager.current = pagination.current;\r\n            pager.pageSize = pagination.pageSize;\r\n            this.setState(\r\n                {\r\n                    pagination: pager,\r\n                    sortedInfo: sorter,\r\n                },\r\n                () => this.fetch(),\r\n            );\r\n        };\r\n\r\n        this.categoryNameChanged = () => {\r\n            this.fetch()\r\n        }\r\n\r\n        this.filterFormRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetch();\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            data, pagination, loading, createTitle, modelName\r\n        } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <Row gutter={[10, 10]}>\r\n                    <Col span={24}>\r\n                        <Table\r\n                            columns={this.columns}\r\n                            rowClassName=\"tb_row\"\r\n                            rowKey={() => uniqid()}\r\n                            dataSource={data}\r\n                            pagination={pagination}\r\n                            loading={loading}\r\n                            onChange={this.handleTableChange}\r\n                            title={() => (\r\n                                <Row>\r\n                                    <Col span={4} style={{ display: 'flex' }}><h2\r\n                                        style={{ margin: 'auto' }}>{i18n.t(modelName)}</h2><Divider type={'vertical'}\r\n                                            style={{\r\n                                                height: '80%',\r\n                                                margin: 'auto 10%'\r\n                                            }} /></Col>\r\n                                    <Col offset={20} span={4}><DBModel reloadGrid={this.fetch} title={createTitle}\r\n                                        modelName={modelName}\r\n                                        buttonIcon={(<PlusOutlined />)} /></Col>\r\n                                </Row>\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <p className=\"pager-Info\">\r\n                    {i18n.t('Showing')}\r\n                    {' '}\r\n                    {data.length}\r\n                    {' '}\r\n                    {i18n.t('from')}\r\n                    {' '}\r\n                    {pagination.total}\r\n                </p>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(List);\r\n"],"sourceRoot":""}