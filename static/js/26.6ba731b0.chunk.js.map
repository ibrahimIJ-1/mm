{"version":3,"sources":["components/basic/RemoteSelect.jsx","helpers/toBase64.js","components/FAQ/DBModel.jsx","components/FAQ/List.jsx"],"names":["superagent","getAgentInstance","RemoteSelect","props","initialState","data","value","undefined","initialValue","defaultValue","fetching","all","state","onChange","setState","v","key","loadData","e","resetValue","onSearch","searchQuery","debounce","endpoint","params","limit","offset","q","get","process","query","end","err","res","body","exclude","array","filter","id","options","map","element","push","text","optiontext","name","optionvalue","ref","this","placeholder","disabled","className","rtl","textHolder","allowClear","mode","showSearch","labelInValue","notFoundContent","size","image","PRESENTED_IMAGE_SIMPLE","filterOption","style","width","Option","fontFamily","d","React","Component","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","DBModel","modelName","modelTitle","title","reloadGrid","buttonIcon","model","isModalVisible","loadModel","a","getRequest","modelFormRef","current","setFieldsValue","onFormFinished","values","questionEn","questionAr","answerEn","answerAr","form","postRequest","closeModal","showModal","createRef","type","onClick","icon","shape","visible","onCancel","okButtonProps","htmlType","cancelButtonProps","display","onFinish","marginTop","gutter","span","Item","label","i18n","t","rules","required","message","TextArea","pageSizeOptions","List","inject","observer","createTitle","editTitle","loading","type_name","selectedPackageId","selectedUserId","pagination","pageSize","parseInt","total","showSizeChanger","hideOnSinglePage","showQuickJumper","sortedInfo","editResourceId","activityForDetails","access","fetch","page","qs","stringify","tpagination","count","deleteModel","deleting","deleteRequest","showActivityDetail","activity","closeActivityDetails","columns","align","dataIndex","sorter","render","ellipsis","object","EditOutlined","placement","onConfirm","okText","cancelText","DeleteFilled","color","newBtn","editBtn","newBtnClicked","click","editBtnClicked","handleTableChange","filters","pager","categoryNameChanged","filterFormRef","rowClassName","rowKey","uniqid","dataSource","margin","height","PlusOutlined","length","withTranslation"],"mappings":"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","file":"static/js/26.6ba731b0.chunk.js","sourcesContent":["/* eslint-disable react/destructuring-assignment */\r\nimport React from 'react';\r\nimport { Select, Spin, Empty } from 'antd';\r\nimport debounce from 'lodash/debounce';\r\nimport getAgentInstance from '../../helpers/superagent';\r\n\r\nconst superagent = getAgentInstance();\r\n\r\nclass RemoteSelect extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    this.initialState = () => ({\r\n      data: [],\r\n      value: undefined,\r\n      initialValue: props.defaultValue || undefined,\r\n      fetching: false,\r\n      all: props.all ? props.all : false\r\n    });\r\n    this.state = this.initialState();\r\n\r\n    this.onChange = (value) => {\r\n      this.setState({ value });\r\n      try {\r\n        const v = value ? value.key : undefined;\r\n        const { onChange } = this.props;\r\n        onChange(value, v);\r\n        if (!value) {\r\n          this.loadData('');\r\n        }\r\n      } catch (e) {\r\n        //\r\n      }\r\n    };\r\n    this.resetValue = () => {\r\n      this.setState({ value: undefined });\r\n    };\r\n\r\n    this.onSearch = (searchQuery) => {\r\n      this.loadData(searchQuery);\r\n    };\r\n\r\n    this.loadData = debounce((searchQuery, endpoint = undefined) => {\r\n      this.setState({ fetching: true });\r\n      const params = {\r\n        limit: 100,\r\n        offset: 0,\r\n      };\r\n\r\n      if (searchQuery && searchQuery !== '') {\r\n        params.q = searchQuery;\r\n      }\r\n      superagent\r\n        .get(`${process.env.REACT_APP_API_URL}${endpoint || this.props.endpoint}`)\r\n        .query(params)\r\n        .end((err, res) => {\r\n          if (!err) {\r\n            const { body } = res;\r\n            const { exclude } = this.props;\r\n\r\n            let array = [];\r\n            if (exclude) {\r\n              const filtered = body.filter((value) => value.id !== exclude);\r\n              array = filtered;\r\n            } else array = body;\r\n\r\n            const options = [];\r\n            array.data.map((element) => {\r\n              options.push({\r\n                text:\r\n                  typeof this.props.optiontext === 'function'\r\n                    ? this.props.optiontext(element)\r\n                    : element.name,\r\n                value:\r\n                  typeof this.props.optionvalue === 'function'\r\n                    ? this.props.optionvalue(element)\r\n                    : element.id,\r\n              });\r\n              return null;\r\n            });\r\n            this.setState({ data: options, fetching: false });\r\n          } else {\r\n            this.setState({ data: [], fetching: false });\r\n          }\r\n        });\r\n    }, 800);\r\n\r\n    this.ref = props.ref;\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.endpoint) this.loadData();\r\n  }\r\n\r\n  static getDerivedStateFromProps(props) {\r\n    if ('value' in props) {\r\n      const { value } = props;\r\n      return { value };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    const { fetching, data, value, initialValue, all } = this.state;\r\n    const {\r\n      placeholder, disabled, className, rtl,\r\n    } = this.props;\r\n    const textHolder = placeholder || '';\r\n    return (\r\n      <Select\r\n        allowClear={this.props.allowClear === undefined ? true : this.props.allowClear}\r\n        mode={this.props.mode || null}\r\n        showSearch\r\n        disabled={disabled}\r\n        labelInValue\r\n        value={value}\r\n        defaultValue={initialValue}\r\n        notFoundContent={\r\n          fetching ? (\r\n            <Spin size=\"small\" />\r\n          ) : (\r\n            <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n          )\r\n        }\r\n        filterOption={false}\r\n        onSearch={this.onSearch}\r\n        onChange={this.onChange}\r\n        style={{ width: '100%' }}\r\n        placeholder={textHolder}\r\n        className={className || undefined}\r\n      >\r\n        {all && (<Select.Option key={-9} style={{ fontFamily: rtl ? 'Cuprumsemi' : undefined }}>All</Select.Option>)}\r\n        {data.map((d) => (\r\n          <Select.Option\r\n            key={d.value}\r\n            style={{ fontFamily: rtl ? 'Cuprumsemi' : undefined }}\r\n          >\r\n            {d.text}\r\n          </Select.Option>\r\n        ))}\r\n      </Select>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RemoteSelect;\r\n","export default function toBase64(file) {\r\n    return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => resolve(reader.result);\r\n            reader.onerror = error => reject(error);\r\n        }\r\n    )\r\n}\r\n","import React, { createRef } from 'react';\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport i18n from '../../i18n';\r\nimport { getRequest, postRequest, putRequest } from '../../helpers/superagentAPI'\r\n\r\nimport { Modal, Button, Form, Input, Row, Col, Divider, Image, InputNumber } from 'antd'\r\nimport toBase64 from \"../../helpers/toBase64\";\r\n\r\nexport default class DBModel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.initialState = () => ({\r\n            id: props.id,\r\n            modelName: props.modelName,\r\n            modelTitle: props.title,\r\n            reloadGrid: props.reloadGrid,\r\n            buttonIcon: props.buttonIcon,\r\n            model: null,\r\n            isModalVisible: false\r\n        });\r\n        this.state = this.initialState();\r\n        this.loadModel = async () => {\r\n            if (this.state.id) {\r\n                let data = await getRequest(`${this.state.modelName}/${this.state.id}`)\r\n                this.setState({\r\n                    model: data,\r\n                }, () => {\r\n                    if (this.modelFormRef.current) {\r\n                        this.modelFormRef.current.setFieldsValue(data)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        this.onFormFinished = async (values) => {\r\n            const { id, modelName, reloadGrid } = this.state\r\n            const {\r\n                questionEn,\r\n                questionAr,\r\n                answerEn,\r\n                answerAr,\r\n            } = values\r\n            let form = {\r\n                questionEn,\r\n                questionAr,\r\n                answerEn,\r\n                answerAr,\r\n                id: id ? id : undefined\r\n            }\r\n            await postRequest(modelName, form)\r\n            if (reloadGrid) reloadGrid()\r\n            this.closeModal()\r\n        }\r\n\r\n        this.showModal = () => {\r\n            this.setState({\r\n                isModalVisible: true,\r\n            }, async () => {\r\n                if (this.state.id) await this.loadModel()\r\n            });\r\n        };\r\n\r\n        this.closeModal = () => {\r\n            this.setState({\r\n                isModalVisible: false\r\n            });\r\n        };\r\n\r\n        this.modelFormRef = createRef()\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            modelTitle,\r\n            buttonIcon,\r\n            id\r\n        } = this.state\r\n        return (\r\n            <div style={{ width: '100%' }}>\r\n                <Button\r\n                    type=\"primary\"\r\n                    onClick={this.showModal}\r\n                    icon={buttonIcon}\r\n                    shape=\"round\"\r\n                    className=\"btn_hover darkBlueBg\"\r\n                    style={{ width: '100%' }}\r\n                >\r\n                </Button>\r\n                {this.state.isModalVisible && (<Modal title={modelTitle}\r\n                    visible={this.state.isModalVisible}\r\n                    onCancel={this.closeModal}\r\n                    width={'85%'}\r\n                    okButtonProps={{\r\n                        form: 'modelForm',\r\n                        htmlType: 'submit',\r\n                        className: 'darkBlueBg'\r\n                    }}\r\n                    cancelButtonProps={{ style: { display: 'none' } }}>\r\n\r\n                    <Form id={'modelForm'} ref={this.modelFormRef} onFinish={this.onFormFinished}\r\n                        style={{ marginTop: '5%' }}>\r\n                        <Row gutter={10}>\r\n                            <Col span={24}>\r\n                                <Form.Item\r\n                                    name={'questionEn'}\r\n                                    label={i18n.t('Question English')}\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: i18n.t('Input is required'),\r\n                                        },\r\n                                    ]}>\r\n                                    <Input />\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col span={24}>\r\n                                <Form.Item\r\n                                    name={'answerEn'}\r\n                                    label={i18n.t('Answer English')}\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: i18n.t('Input is required'),\r\n                                        },\r\n                                    ]}>\r\n                                    <Input.TextArea />\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col span={24}>\r\n                                <Form.Item\r\n                                    name={'questionAr'}\r\n                                    label={i18n.t('Question Arabic')}\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: i18n.t('Input is required'),\r\n                                        },\r\n                                    ]}>\r\n                                    <Input />\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col span={24}>\r\n                                <Form.Item\r\n                                    name={'answerAr'}\r\n                                    label={i18n.t('Answer Arabic')}\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: i18n.t('Input is required'),\r\n                                        },\r\n                                    ]}>\r\n                                    <Input.TextArea />\r\n                                </Form.Item>\r\n                            </Col>\r\n\r\n                        </Row>\r\n                    </Form>\r\n                </Modal>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/* eslint-disable camelcase */\r\n/* eslint-disable react/no-access-state-in-setstate */\r\n/* eslint-disable react/destructuring-assignment */\r\nimport React from 'react';\r\nimport {\r\n    Table,\r\n    Button,\r\n    Row,\r\n    Col,\r\n    Form,\r\n    Select,\r\n    Switch,\r\n    Input,\r\n    Divider, Popconfirm,\r\n    Modal\r\n} from 'antd';\r\nimport {\r\n    CheckOutlined,\r\n    CloseOutlined,\r\n    RedoOutlined,\r\n    PlusOutlined,\r\n    EditOutlined, DeleteFilled,\r\n    LineOutlined\r\n} from '@ant-design/icons';\r\n\r\nimport { observer, inject } from 'mobx-react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport uniqid from 'uniqid';\r\nimport moment from 'moment';\r\nimport qs from 'qs';\r\nimport i18n from '../../i18n';\r\nimport './model.css';\r\nimport DBModel from \"./DBModel\"\r\nimport getAgentInstance from '../../helpers/superagent'\r\nimport { deleteRequest, getRequest, putRequest } from '../../helpers/superagentAPI'\r\nimport RemoteSelect from \"../basic/RemoteSelect\";\r\n\r\nconst superagent = getAgentInstance();\r\n\r\nconst pageSizeOptions = ['8', '15', '20', '30', '40'];\r\n\r\n@inject('userStore')\r\n@observer\r\nclass List extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.initialState = () => ({\r\n            modelName: 'FAQ',\r\n            createTitle: i18n.t('New Record'),\r\n            editTitle: i18n.t('Edit Record'),\r\n            data: [],\r\n            loading: false,\r\n            type_name: undefined,\r\n            selectedPackageId: -1,\r\n            selectedUserId: -1,\r\n            pagination: {\r\n                pageSize: parseInt(pageSizeOptions[0], 10),\r\n                pageSizeOptions,\r\n                current: 1,\r\n                total: 0,\r\n                showSizeChanger: true,\r\n                hideOnSinglePage: false,\r\n                showQuickJumper: true,\r\n            },\r\n            sortedInfo: null,\r\n            editResourceId: undefined,\r\n            activityForDetails: null,\r\n            access: []//JSON.parse(this.props.userStore.value.privilege),\r\n        });\r\n        this.state = this.initialState();\r\n\r\n        this.fetch = async () => {\r\n            this.setState({ loading: true });\r\n            const { pagination, modelName } = this.state;\r\n\r\n            const params = {\r\n                pageSize: pagination.pageSize,\r\n                page: pagination.current - 1,\r\n            };\r\n\r\n            try {\r\n                this.setState({ loading: true })\r\n                let body = await getRequest(`${modelName}?${qs.stringify(params)}`)\r\n                const tpagination = { ...this.state.pagination };\r\n                tpagination.total = body.count;\r\n                this.setState({\r\n                    loading: false,\r\n                    data: body.data,\r\n                    pagination: tpagination,\r\n                });\r\n            } catch (error) {\r\n                this.setState(this.initialState())\r\n            } finally {\r\n                this.setState({ loading: false })\r\n            }\r\n        };\r\n\r\n        this.deleteModel = async (id) => {\r\n            try {\r\n                this.setState({\r\n                    deleting: true\r\n                })\r\n                await deleteRequest(`${this.state.modelName}/${id}`)\r\n                this.fetch()\r\n            } catch (error) {\r\n            } finally {\r\n                this.setState({\r\n                    deleting: false\r\n                })\r\n            }\r\n        }\r\n\r\n        this.showActivityDetail = (activity) => {\r\n            this.setState({\r\n                activityForDetails: activity\r\n            })\r\n        }\r\n\r\n        this.closeActivityDetails = () => {\r\n            this.setState({\r\n                activityForDetails: null\r\n            })\r\n        }\r\n\r\n        this.columns = [\r\n            {\r\n                title: '#',\r\n                align: 'center',\r\n                dataIndex: 'id',\r\n                key: 'id',\r\n                sorter: true,\r\n                width: 70,\r\n                render: (value) => <p style={{ fontFamily: 'Cuprumsemi' }}>{value}</p>,\r\n            },\r\n            {\r\n                title: i18n.t('English Question'),\r\n                dataIndex: `questionEn`,\r\n                key: `questionEn`,\r\n                align: 'start',\r\n                ellipsis: true\r\n            },\r\n            {\r\n                title: i18n.t('English Answer'),\r\n                dataIndex: `answerEn`,\r\n                key: `answerEn`,\r\n                align: 'start',\r\n                ellipsis: true\r\n            },\r\n            {\r\n                title: i18n.t('Actions'),\r\n                sorter: false,\r\n                align: 'center',\r\n                width: 160,\r\n                render: (object) => (\r\n                    <Row span={24} gutter={5}>\r\n                        <Col span={12}>\r\n                            <DBModel id={object.id} reloadGrid={this.fetch} title={this.state.editTitle}\r\n                                modelName={this.state.modelName} buttonIcon={(<EditOutlined />)} />\r\n                        </Col>\r\n                        <Col span={12}>\r\n                            <Popconfirm placement=\"bottom\" title={i18n.t('delete') + '?'} onConfirm={() => this.deleteModel(object.id)}\r\n                                okText={i18n.t('Yes')}\r\n                                cancelText={i18n.t('No')}>\r\n                                <Button icon={<DeleteFilled style={{\r\n                                    color: 'red'\r\n                                }} />}\r\n                                    shape=\"round\"\r\n                                    className=\"btn_hover darkBlueBg\"\r\n                                    type={'primary'}\r\n                                    loading={this.state.deleting} />\r\n                            </Popconfirm>\r\n                        </Col>\r\n                    </Row>\r\n                ),\r\n            },\r\n        ];\r\n\r\n        // custom refs\r\n        this.newBtn = React.createRef();\r\n        this.editBtn = React.createRef();\r\n\r\n        this.newBtnClicked = () => {\r\n            this.newBtn.current.click();\r\n        };\r\n\r\n        this.editBtnClicked = async (id) => {\r\n            await this.setState({\r\n                editResourceId: id,\r\n            });\r\n            this.editBtn.current.click();\r\n        };\r\n\r\n        this.handleTableChange = (pagination, filters, sorter) => {\r\n            const pager = { ...this.state.pagination };\r\n            pager.current = pagination.current;\r\n            pager.pageSize = pagination.pageSize;\r\n            this.setState(\r\n                {\r\n                    pagination: pager,\r\n                    sortedInfo: sorter,\r\n                },\r\n                () => this.fetch(),\r\n            );\r\n        };\r\n\r\n        this.categoryNameChanged = () => {\r\n            this.fetch()\r\n        }\r\n\r\n        this.filterFormRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetch();\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            data, pagination, loading, createTitle, modelName, activityForDetails\r\n        } = this.state;\r\n        return (\r\n            <>\r\n                <Row gutter={[10, 10]}>\r\n                    <Col span={24}>\r\n                        <Table\r\n                            columns={this.columns}\r\n                            rowClassName=\"tb_row\"\r\n                            rowKey={() => uniqid()}\r\n                            dataSource={data}\r\n                            pagination={pagination}\r\n                            loading={loading}\r\n                            onChange={this.handleTableChange}\r\n                            title={() => (\r\n                                <Row>\r\n                                    <Col span={4} style={{ display: 'flex' }}><h2\r\n                                        style={{ margin: 'auto' }}>{i18n.t(modelName)}</h2><Divider type={'vertical'} style={{\r\n                                            height: '80%',\r\n                                            margin: 'auto 10%'\r\n                                        }} /></Col>\r\n                                    <Col offset={16} span={4}><DBModel reloadGrid={this.fetch} title={createTitle}\r\n                                        modelName={modelName}\r\n                                        buttonIcon={(<PlusOutlined />)} /></Col>\r\n                                </Row>\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <p className=\"pager-Info\">\r\n                    {i18n.t('Showing')}\r\n                    {' '}\r\n                    {data.length}\r\n                    {' '}\r\n                    {i18n.t('from')}\r\n                    {' '}\r\n                    {pagination.total}\r\n                </p>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(List);\r\n"],"sourceRoot":""}